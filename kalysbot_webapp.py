import streamlit as st
import os
from dotenv import load_dotenv
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_pinecone import PineconeVectorStore
from langchain.chains import ConversationalRetrievalChain
from langchain.prompts import PromptTemplate

# --- Configuration ---
INDEX_NAME = "kalysbot"
DIMENSION = 1536
LLM_MODEL = "gpt-3.5-turbo"
PDF_DIR = "data/pdfs"
DEFAULT_LANGUAGE = "en"

# --- Language Localization Maps ---
LANGUAGE_MAPS = {
    "en": {
        "label": "üá¨üáß English",
        "page_title": "Kalys MVP",
        "main_title": "I am Kalys üëã, a Kyrgyz law assistant bot.",
        "caption_connected": "Connected to Pinecone index: {INDEX_NAME}. Your knowledge base is ready!",
        "sidebar_header_filter": "Document Filtering (Knowledge Base)",
        "sidebar_markdown_filter": "Select the law codes the engine should search within.",
        "sidebar_info_searching": "Searching across **{count}** documents.",
        "sidebar_header_retrieval": "Retrieval Settings",
        "sidebar_slider_label": "Documents Chunks to Retrieve (k)",
        "sidebar_header_downloads": "Source Downloads",
        "sidebar_markdown_downloads": "Download the original law documents below for verification.",
        "sidebar_warning_dir": f"Local directory '{PDF_DIR}' not found. Cannot offer downloads.",
        "sidebar_info_no_pdfs": f"No PDF files found in the '{PDF_DIR}' directory.",
        "sidebar_check_api": "Ensure your API keys are set in a local `.env` file.",
        "chat_input_placeholder": "Ask a question about laws...",
        "spinner_thinking": "Thinking...",
        "source_expander": "üìù Sources Used for this Answer",
        "source_label": "Source {j}: {display_name} (Page {display_page})",
        "button_new_chat": "Start New Chat",
        "status_success": "Successfully initialized RAG Chain with document filtering and custom prompt!",
        "error_no_doc_selected": "No documents selected for search. Please select at least one document.",
        "error_missing_keys": "Missing one or more required API keys/environment variables. Check your `.env` file.",
        "error_rag_setup": "Error connecting to Pinecone or setting up RAG: {e}",
        "error_generation": "An error occurred during generation: {e}",
        "error_chain_fail": "RAG chain failed to initialize. Please check document selection, API keys, and index status.",
        "warning_disclaimer": "‚ö†Ô∏è Always verify law status and accuracy with official sources.",
    },
    "ru": {
        "label": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "page_title": "–ö–∞–ª—ã—Å MVP",
        "main_title": "–Ø –ö–∞–ª—ã—Å üëã, –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–∫–æ–Ω–∞–º –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞.",
        "caption_connected": "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∏–Ω–¥–µ–∫—Å—É Pinecone: {INDEX_NAME}. –í–∞—à–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞!",
        "sidebar_header_filter": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π)",
        "sidebar_markdown_filter": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–¥—ã –∑–∞–∫–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        "sidebar_info_searching": "–ü–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –ø–æ **{count}** –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.",
        "sidebar_header_retrieval": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "sidebar_slider_label": "–ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –ß–∞—Å—Ç–∏ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ (k)",
        "sidebar_header_downloads": "–ó–∞–≥—Ä—É–∑–∫–∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
        "sidebar_markdown_downloads": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        "sidebar_warning_dir": f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ '{PDF_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        "sidebar_info_no_pdfs": f"–í –∫–∞—Ç–∞–ª–æ–≥–µ '{PDF_DIR}' —Ñ–∞–π–ª—ã PDF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "sidebar_check_api": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∏ –∫–ª—é—á–∏ API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ `.env`.",
        "chat_input_placeholder": "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–∞–∫–æ–Ω—ã...",
        "spinner_thinking": "–î—É–º–∞—é...",
        "source_expander": "üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
        "source_label": "–ò—Å—Ç–æ—á–Ω–∏–∫ {j}: {display_name} (–°—Ç—Ä. {display_page})",
        "button_new_chat": "–ù–∞—á–∞—Ç—å –ù–æ–≤—ã–π –ß–∞—Ç",
        "status_success": "RAG-—Ü–µ–ø–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!",
        "error_no_doc_selected": "–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç.",
        "error_missing_keys": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–ª—é—á–µ–π API/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª `.env`.",
        "error_rag_setup": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pinecone –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG: {e}",
        "error_generation": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}",
        "error_chain_fail": "RAG-—Ü–µ–ø–æ—á–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–ª—é—á–∏ API –∏ —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞.",
        "warning_disclaimer": "‚ö†Ô∏è –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω–æ–≤ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.",
    },
    "ky": {
        "label": "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞",
        "page_title": "–ö–∞–ª—ã—Å MVP",
        "main_title": "–ú–µ–Ω –ö–∞–ª—ã—Å üëã ‚Äî –ö—ã—Ä–≥—ã–∑ –º—ã–π–∑–∞–º–¥–∞—Ä—ã –±–æ—é–Ω—á–∞ –∂–∞—Ä–¥–∞–º—á—ã –±–æ—Ç.",
        "caption_connected": "Pinecone –∏–Ω–¥–µ–∫—Å–∏–Ω–µ —Ç—É—Ç–∞—à—Ç—ã: {INDEX_NAME}. –°–∏–∑–¥–∏–Ω –±–∏–ª–∏–º –±–∞–∑–∞“£—ã–∑ –¥–∞—è—Ä!",
        "sidebar_header_filter": "–î–æ–∫—É–º–µ–Ω—Ç—Ç–µ—Ä–¥–∏ —á—ã–ø–∫–∞–ª–æ–æ (–ë–∏–ª–∏–º –±–∞–∑–∞—Å—ã)",
        "sidebar_markdown_filter": "–ò–∑–¥”©”© “Ø—á“Ø–Ω –º—ã–π–∑–∞–º –∫–æ–¥–µ–∫—Å—Ç–µ—Ä–∏–Ω —Ç–∞–Ω–¥–∞“£—ã–∑.",
        "sidebar_info_searching": "**{count}** –¥–æ–∫—É–º–µ–Ω—Ç –±–æ—é–Ω—á–∞ –∏–∑–¥”©”©.",
        "sidebar_header_retrieval": "–ò–∑–¥”©”© –ñ”©–Ω–¥”©”©–ª”©—Ä“Ø",
        "sidebar_slider_label": "–ö–∞–Ω—á–∞ –±—É–ª–∞–∫—Ç–∞—Ä–¥—ã –∫–æ–ª–¥–æ–Ω—É–ø –∂–æ–æ–ø —Ç–∞–ø–∫—ã“£—ã–∑ –∫–µ–ª–µ—Ç?",
        "sidebar_header_downloads": "–ë—É–ª–∞–∫—Ç–∞—Ä–¥—ã –ñ“Ø–∫—Ç”©–ø –ê–ª—É—É",
        "sidebar_markdown_downloads": "–¢–µ–∫—à–µ—Ä“Ø“Ø “Ø—á“Ø–Ω –±–∞—à—Ç–∞–ø–∫—ã —é—Ä–∏–¥–∏–∫–∞–ª—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç—Ç–µ—Ä–¥–∏ –∂“Ø–∫—Ç”©–ø –∞–ª—ã“£—ã–∑.",
        "sidebar_warning_dir": f"–ñ–µ—Ä–≥–∏–ª–∏–∫—Ç“Ø“Ø '{PDF_DIR}' –∫–∞—Ç–∞–ª–æ–≥—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫. –ñ“Ø–∫—Ç”©”© –º“Ø–º–∫“Ø–Ω —ç–º–µ—Å.",
        "sidebar_info_no_pdfs": f"'{PDF_DIR}' –∫–∞—Ç–∞–ª–æ–≥—É–Ω–¥–∞ PDF —Ñ–∞–π–ª–¥–∞—Ä—ã —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.",
        "sidebar_check_api": "–°–∏–∑–¥–∏–Ω API –∞—á–∫—ã—á—Ç–∞—Ä—ã“£—ã–∑ –∂–µ—Ä–≥–∏–ª–∏–∫—Ç“Ø“Ø `.env` —Ñ–∞–π–ª—ã–Ω–¥–∞ –æ—Ä–Ω–æ—Ç—É–ª–≥–∞–Ω—ã–Ω —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑.",
        "chat_input_placeholder": "–ú—ã–π–∑–∞–º–¥–∞—Ä –±–æ—é–Ω—á–∞ —Å—É—Ä–æ–æ –±–µ—Ä–∏“£–∏–∑...",
        "spinner_thinking": "–û–π–ª–æ–Ω—É—É–¥–∞...",
        "source_expander": "üìù –ö–æ–ª–¥–æ–Ω—É–ª–≥–∞–Ω –±—É–ª–∞–∫—Ç–∞—Ä",
        "source_label": "–ë—É–ª–∞–∫ {j}: {display_name} (–ë–µ—Ç {display_page})",
        "button_new_chat": "–ñ–∞“£—ã –ß–∞—Ç—Ç—ã –ë–∞—à—Ç–æ–æ",
        "status_success": "RAG —á—ã–Ω–∂—ã—Ä—á–∞—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç—Ç–∏ —á—ã–ø–∫–∞–ª–æ–æ –∂–∞–Ω–∞ –∂–µ–∫–µ —Å—É—Ä–æ–æ –º–µ–Ω–µ–Ω –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∏—à–∫–µ –∫–∏—Ä–≥–∏–∑–∏–ª–¥–∏!",
        "error_no_doc_selected": "–ò–∑–¥”©”© “Ø—á“Ø–Ω –¥–æ–∫—É–º–µ–Ω—Ç—Ç–µ—Ä —Ç–∞–Ω–¥–∞–ª–≥–∞–Ω –∂–æ–∫. –°—É—Ä–∞–Ω—ã—á, –∂–æ–∫ –¥–µ–≥–µ–Ω–¥–µ –±–∏—Ä –¥–æ–∫—É–º–µ–Ω—Ç—Ç–∏ —Ç–∞–Ω–¥–∞“£—ã–∑.",
        "error_missing_keys": "–¢–∞–ª–∞–ø –∫—ã–ª—ã–Ω–≥–∞–Ω API –∞—á–∫—ã—á—Ç–∞—Ä—ã/–∞–π–ª–∞–Ω–∞-—á”©–π—Ä”© ”©–∑–≥”©—Ä–º”©–ª”©—Ä“Ø –∂–æ–∫. –°–∏–∑–¥–∏–Ω `.env` —Ñ–∞–π–ª—ã“£—ã–∑–¥—ã —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑.",
        "error_rag_setup": "Pinecone'–≥–æ —Ç—É—Ç–∞—à—É—É–¥–∞ –∂–µ RAG'–¥–∏ –æ—Ä–Ω–æ—Ç—É—É–¥–∞ –∫–∞—Ç–∞: {e}",
        "error_generation": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á—É—Ä—É–Ω–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏: {e}",
        "error_chain_fail": "RAG —á—ã–Ω–∂—ã—Ä—á–∞—Å—ã –∏—à–∫–µ –∫–∏—Ä–≥–∏–∑–∏–ª–≥–µ–Ω –∂–æ–∫. –î–æ–∫—É–º–µ–Ω—Ç —Ç–∞–Ω–¥–æ–æ–Ω—É, API –∞—á–∫—ã—á—Ç–∞—Ä—ã–Ω –∂–∞–Ω–∞ –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç—É—Å—É–Ω —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑.",
        "warning_disclaimer": "‚ö†Ô∏è –ú—ã–π–∑–∞–º–¥–∞—Ä–¥—ã–Ω —Å—Ç–∞—Ç—É—Å—É–Ω –∂–∞–Ω–∞ —Ç–∞–∫—Ç—ã–≥—ã–Ω —Ä–∞—Å–º–∏–π –±—É–ª–∞–∫—Ç–∞—Ä–¥–∞–Ω —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑.",
    },
}

# --- Set up the current language and translator function ---
if "language" not in st.session_state:
    st.session_state["language"] = DEFAULT_LANGUAGE


# Translator function
def T(key, **kwargs):
    """Returns the translated string for a given key, optionally applying formatting."""
    lang_map = LANGUAGE_MAPS.get(st.session_state.language, LANGUAGE_MAPS[DEFAULT_LANGUAGE])
    text = lang_map.get(key, LANGUAGE_MAPS[DEFAULT_LANGUAGE].get(key, f"[MISSING TEXT: {key}]"))
    return text.format(**kwargs)


# --- NEW: LLM Settings for Detailed Answers ---
LLM_TEMPERATURE = 0.5
SYSTEM_PROMPT = (
    "You are Kalys, an expert legal assistant. Your primary function is to provide comprehensive, "
    "detailed, and accurate answers based *only* on the provided source documents (laws and codes). "
    "Structure your answers clearly, similar to a detailed report or a ChatPDF response, ensuring all "
    "relevant legal context is included. Do not answer questions that cannot be supported by the sources."
)

# --- Define the Custom QA Prompt Template ---
QA_PROMPT_TEMPLATE = (
        SYSTEM_PROMPT +
        "\n\nUse the following pieces of context to answer the question at the end. "
        "If you don't know the answer, just state that you don't know, don't try to make up an answer."
        "\n\n----------------\n"
        "{context}"
        "\n----------------\n"
        "Question: {question}"
        "\nHelpful Answer:"
)

QA_PROMPT = PromptTemplate(
    template=QA_PROMPT_TEMPLATE,
    input_variables=["context", "question"]
)

# --- Mapping for Descriptive Names (Localized) ---
# Each file now maps to an object containing the localized name for each supported language.
PDF_NAME_MAP = {
    "01aug2020_kidscode.pdf": {"en": "Children's Code", "ru": "–ö–æ–¥–µ–∫—Å –æ –¥–µ—Ç—è—Ö", "ky": "–ë–∞–ª–¥–∞—Ä –∂”©–Ω“Ø–Ω–¥”© –∫–æ–¥–µ–∫—Å"},
    "06aug2025_civilprocedurecode.pdf": {"en": "Civil Procedural Code", "ru": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å",
                                         "ky": "–ñ–∞—Ä–∞–Ω–¥—ã–∫ –ø—Ä–æ—Ü–µ—Å—Å—Ç–∏–∫ –∫–æ–¥–µ–∫—Å–∏"},
    "09aug2025_crimeprocedurecode.pdf": {"en": "Criminal Procedure Code", "ru": "–£–≥–æ–ª–æ–≤–Ω–æ-–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å",
                                         "ky": "–ö—ã–ª–º—ã—à-–∂–∞–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª–¥—ã–∫ –∫–æ–¥–µ–∫—Å–∏"},
    "10jul2025_labourcode.pdf": {"en": "Labour Code", "ru": "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å", "ky": "–≠–º–≥–µ–∫ –∫–æ–¥–µ–∫—Å–∏"},
    "10jul2025_nontaxrevenuecode.pdf": {"en": "Non-Tax Income Code", "ru": "–ö–æ–¥–µ–∫—Å –æ –Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –¥–æ—Ö–æ–¥–∞—Ö",
                                        "ky": "–°–∞–ª—ã–∫—Ç—ã–∫ —ç–º–µ—Å –∫–∏—Ä–µ—à–µ–ª–µ—Ä –∂”©–Ω“Ø–Ω–¥”© –∫–æ–¥–µ–∫—Å"},
    "13aug2025_offencecode.pdf": {"en": "Code of Offenses", "ru": "–ö–æ–¥–µ–∫—Å –æ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö",
                                  "ky": "–£–∫—É–∫ –±—É–∑—É—É–ª–∞—Ä –∂”©–Ω“Ø–Ω–¥”© –∫–æ–¥–µ–∫—Å"},
    "17jul2025_familycode.pdf": {"en": "Family Code", "ru": "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å", "ky": "“Æ–π-–±“Ø–ª”© –∫–æ–¥–µ–∫—Å–∏"},
    "28feb2025_adminprocedurecode.pdf": {"en": "Administrative Procedural Code",
                                         "ru": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å",
                                         "ky": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–¥–∏–∫-–ø—Ä–æ—Ü–µ—Å—Å—Ç–∏–∫ –∫–æ–¥–µ–∫—Å–∏"},
    "28jul2025_penalcode.pdf": {"en": "Criminal Code", "ru": "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å", "ky": "–ö—ã–ª–º—ã—à-–∂–∞–∑–∞ –∫–æ–¥–µ–∫—Å–∏"},
    "29apr2025_budgetcode.pdf": {"en": "Budget Code", "ru": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å", "ky": "–ë—é–¥–∂–µ—Ç –∫–æ–¥–µ–∫—Å–∏"},
    "31jul2025_crimeexecutivecode.pdf": {"en": "Criminal Execution Code", "ru": "–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å",
                                         "ky": "–ñ–∞–∑–∞-–∞—Ç–∫–∞—Ä—É—É –∫–æ–¥–µ–∫—Å–∏"},
    "31jul2025_taxcode.pdf": {"en": "Tax Code", "ru": "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å", "ky": "–°–∞–ª—ã–∫ –∫–æ–¥–µ–∫—Å–∏"},
    "05052021_constitution.pdf": {"en": "Constitution of Kyrgyz Republic", "ru": "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏",
                                  "ky": "–ö—ã—Ä–≥—ã–∑ –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å—ã–Ω—ã–Ω –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è—Å—ã"},
    "07022025_civilcode2.pdf": {"en": "Civil Code (Part 2)", "ru": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å (—á–∞—Å—Ç—å 2)",
                                "ky": "–ñ–∞—Ä–∞–Ω–¥—ã–∫ –∫–æ–¥–µ–∫—Å (2-–±”©–ª“Ø–∫)"},
    "07102025_civilcode1.pdf": {"en": "Civil Code (Part 1)", "ru": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å (—á–∞—Å—Ç—å 1)",
                                "ky": "–ñ–∞—Ä–∞–Ω–¥—ã–∫ –∫–æ–¥–µ–∫—Å (1-–±”©–ª“Ø–∫)"},
    "digitalcode.pdf": {"en": "Digital Code", "ru": "–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥–µ–∫—Å", "ky": "–°–∞–Ω–∞—Ä–∏–ø –∫–æ–¥–µ–∫—Å–∏"},
    "judicalhonorcode.pdf": {"en": "Code of Ethics For Judges", "ru": "–ö–æ–¥–µ–∫—Å —á–µ—Å—Ç–∏ —Å—É–¥–µ–π",
                             "ky": "–°–æ—Ç—Ç–æ—Ä–¥—É–Ω –∞—Ä-–Ω–∞–º—ã—Å –∫–æ–¥–µ–∫—Å–∏"},
    "landcode.pdf": {"en": "Land Code", "ru": "–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å", "ky": "–ñ–µ—Ä –∫–æ–¥–µ–∫—Å–∏"},
    "tkeaes.pdf": {"en": "Customs Code of the Eurasian Economic Union",
                   "ru": "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å –ï–≤—Ä–∞–∑–∏–π—Å–∫–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—é–∑–∞",
                   "ky": "–ï–≤—Ä–∞–∑–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫ –±–∏—Ä–∏–º–¥–∏–≥–∏–Ω–∏–Ω –ë–∞–∂—ã –∫–æ–¥–µ–∫—Å–∏"}
}


# --- New Helper Function for Localized Document Names ---
def get_doc_display_name(file_name):
    """Retrieves the localized display name for a given file name."""
    lang = st.session_state.language
    doc_map = PDF_NAME_MAP.get(file_name, {})
    # Fallback: Check current language, then English, then raw file name
    return doc_map.get(lang, doc_map.get(DEFAULT_LANGUAGE, file_name))


# --- Load Environment Variables from .env file ---
load_dotenv()

# --- Streamlit Page Configuration ---
# Use localized page title
st.set_page_config(
    page_title=T("page_title"),
    page_icon="‚öñÔ∏è",
    initial_sidebar_state="expanded"
)

# --- UI Components ---
# Use localized main title
st.title(T("main_title"))
st.caption(T("caption_connected", INDEX_NAME=INDEX_NAME))

# --- Session State for Document Selection ---
if "selected_files" not in st.session_state:
    st.session_state["selected_files"] = list(PDF_NAME_MAP.keys())

# --- Sidebar for Configuration and Downloads ---
with st.sidebar:
    # Language Selector
    st.header("üåê Language")

    # Get the current index of the selected language
    lang_labels = [LANGUAGE_MAPS[key]["label"] for key in LANGUAGE_MAPS.keys()]
    current_index = list(LANGUAGE_MAPS.keys()).index(st.session_state.language)

    selected_label = st.selectbox(
        "Select UI Language",
        options=lang_labels,
        index=current_index,
        label_visibility="collapsed"
    )

    # Update session state if language changes
    selected_lang_key = [key for key, value in LANGUAGE_MAPS.items() if value["label"] == selected_label][0]
    if st.session_state.language != selected_lang_key:
        st.session_state.language = selected_lang_key
        st.rerun()  # Rerun to apply new language strings immediately

    # Document Filtering
    st.header(T("sidebar_header_filter"))
    st.markdown(T("sidebar_markdown_filter"))

    selected_files_temp = []
    for file_name in PDF_NAME_MAP.keys():
        default_state = file_name in st.session_state.selected_files

        # Use helper function to get localized display name
        display_name = get_doc_display_name(file_name)

        # Checkbox labels use the descriptive map names
        if st.checkbox(f" {display_name}", value=default_state, key=f"checkbox_{file_name}"):
            selected_files_temp.append(file_name)

    st.session_state.selected_files = selected_files_temp
    st.info(T("sidebar_info_searching", count=len(st.session_state.selected_files)))

    # Retrieval Settings
    st.markdown("---")
    st.header(T("sidebar_header_retrieval"))
    k_retrieval = st.slider(T("sidebar_slider_label"), 1, 10, 4, 1)

    # Source Downloads
    st.markdown("---")
    st.header(T("sidebar_header_downloads"))
    st.markdown(T("sidebar_markdown_downloads"))

    if os.path.isdir(PDF_DIR):
        try:
            pdf_files = [f for f in os.listdir(PDF_DIR) if f.lower().endswith(".pdf")]

            if pdf_files:
                for pdf_file_name in pdf_files:
                    file_path = os.path.join(PDF_DIR, pdf_file_name)

                    # Use helper function to get localized display name for download button
                    display_label = get_doc_display_name(pdf_file_name)

                    with open(file_path, "rb") as file:
                        file_data = file.read()

                    st.download_button(
                        label=f"‚¨áÔ∏è {display_label}",
                        data=file_data,
                        file_name=pdf_file_name,
                        mime="application/pdf"
                    )
            else:
                st.info(T("sidebar_info_no_pdfs"))

        except Exception as e:
            st.error(f"Error listing or serving files: {e}")
    else:
        st.warning(T("sidebar_warning_dir"))

    st.markdown("---")
    st.markdown(f"LLM: `{LLM_MODEL}` (Temp: {LLM_TEMPERATURE})")
    st.markdown(f"Embeddings: `text-embedding-3-small` ({DIMENSION} dim)")
    st.markdown(T("sidebar_check_api"))


# --- Core RAG Logic (Cached for Initialization) ---

# Re-initialize the chain when k_retrieval or the selected_files list changes
@st.cache_resource(show_spinner=T("spinner_thinking"))
def initialize_rag_chain(index_name, k_retrieval, selected_files, llm_temperature):
    """
    Initializes Pinecone connection, creates the vector store retriever with filtering,
    and sets up the ConversationalRetrievalChain with system instructions.
    """
    if not selected_files:
        st.error(T("error_no_doc_selected"))
        return None

    try:
        if not all([os.getenv("OPENAI_API_KEY"), os.getenv("PINECONE_API_KEY"), os.getenv("PINECONE_ENVIRONMENT")]):
            st.error(T("error_missing_keys"))
            return None

        embeddings = OpenAIEmbeddings(model="text-embedding-3-small")

        vectorstore = PineconeVectorStore.from_existing_index(
            index_name=index_name,
            embedding=embeddings,
        )

        metadata_filter = {"source": {"$in": selected_files}}

        retriever = vectorstore.as_retriever(
            search_kwargs={
                "k": k_retrieval,
                "filter": metadata_filter
            }
        )

        llm = ChatOpenAI(
            temperature=llm_temperature,
            model_name=LLM_MODEL,
        )

        chain = ConversationalRetrievalChain.from_llm(
            llm=llm,
            retriever=retriever,
            return_source_documents=True,
            verbose=False,
            combine_docs_chain_kwargs={"prompt": QA_PROMPT}
        )
        st.success(T("status_success"))
        return chain

    except Exception as e:
        st.error(T("error_rag_setup", e=e))
        return None


# --- Main Application Flow ---

# We only pass language-independent parameters to the cached function
rag_chain = initialize_rag_chain(
    INDEX_NAME,
    k_retrieval,
    st.session_state.selected_files,
    LLM_TEMPERATURE
)

if "chat_history" not in st.session_state:
    st.session_state["chat_history"] = []

# Display chat history
for i, message in enumerate(st.session_state.chat_history):
    avatar = "‚öñÔ∏è" if message["role"] == "assistant" else "user"

    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

        if message["role"] == "assistant" and "sources" in message:
            with st.expander(T("source_expander")):
                for j, source in enumerate(message["sources"]):
                    page_number_raw = source.metadata.get('page', 'N/A')
                    source_filename = source.metadata.get('source', 'Unknown Source')

                    # Use helper function to get localized display name
                    display_name = get_doc_display_name(source_filename)

                    try:
                        display_page = int(float(page_number_raw))
                    except (ValueError, TypeError):
                        display_page = page_number_raw

                    st.text_area(
                        T("source_label", j=j + 1, display_name=display_name, display_page=display_page),
                        value=source.page_content,
                        height=100,
                        key=f"source_view_{i}_{j}",
                        disabled=True
                    )

# Handle user input
if prompt := st.chat_input(T("chat_input_placeholder")):
    if rag_chain:
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant", avatar="‚öñÔ∏è"):
            with st.spinner(T("spinner_thinking")):
                try:
                    history_for_chain = [
                        (st.session_state.chat_history[k - 1]["content"], st.session_state.chat_history[k]["content"])
                        for k in range(1, len(st.session_state.chat_history), 2)
                    ]

                    result = rag_chain.invoke(
                        {"question": prompt, "chat_history": history_for_chain},
                    )

                    response_text = result["answer"]
                    sources = result.get("source_documents", [])

                    # ADD WARNING DISCLAIMER HERE
                    warning_text = T("warning_disclaimer")
                    full_response = f"{warning_text}\n\n{response_text}"

                    st.markdown(full_response)

                    if sources:
                        with st.expander(T("source_expander")):
                            for j, source in enumerate(sources):
                                page_number_raw = source.metadata.get('page', 'N/A')
                                source_filename = source.metadata.get('source', 'Unknown Source')

                                # Use helper function to get localized display name
                                display_name = get_doc_display_name(source_filename)

                                try:
                                    display_page = int(float(page_number_raw))
                                except (ValueError, TypeError):
                                    display_page = page_number_raw

                                st.text_area(
                                    T("source_label", j=j + 1, display_name=display_name, display_page=display_page),
                                    value=source.page_content,
                                    height=100,
                                    key=f"source_view_current_display_{j}",
                                    disabled=True
                                )

                    assistant_message = {
                        "role": "assistant",
                        "content": full_response,  # Store the full response with the warning
                        "sources": sources
                    }
                    st.session_state.chat_history.append(assistant_message)

                except Exception as e:
                    error_msg = T("error_generation", e=e)
                    st.error(error_msg)
                    st.session_state.chat_history.append({"role": "assistant", "content": error_msg})
                    print(f"RAG Error: {e}")

    else:
        st.error(T("error_chain_fail"))

# Clear chat button
if st.button(T("button_new_chat")):
    st.session_state["chat_history"] = []
    st.rerun()
